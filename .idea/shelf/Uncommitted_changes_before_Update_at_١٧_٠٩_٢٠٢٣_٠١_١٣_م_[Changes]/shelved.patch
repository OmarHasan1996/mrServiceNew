Index: lib/map/orderTrackingPage.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'dart:async';\r\nimport 'package:closer/api/api_service.dart';\r\nimport 'package:closer/color/MyColors.dart';\r\nimport 'package:closer/constant/app_size.dart';\r\nimport 'package:closer/constant/strings.dart';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:google_maps_flutter/google_maps_flutter.dart';\r\n// ignore: depend_on_referenced_packages\r\nimport 'package:flutter_polyline_points/flutter_polyline_points.dart';\r\nimport 'package:location/location.dart';\r\nclass OrderTrackingPage extends StatefulWidget {\r\n  final String orderServiceId;\r\n  final LatLng distination;\r\n  OrderTrackingPage({Key? key, required this.orderServiceId, required this.distination}) : super(key: key);\r\n  @override\r\n  State<OrderTrackingPage> createState() => OrderTrackingPageState();\r\n}\r\nclass OrderTrackingPageState extends State<OrderTrackingPage> {\r\n  final Completer<GoogleMapController> _controller = Completer();\r\n // static const LatLng sourceLocation = LatLng(25.297593, 55.378071);\r\n  late final LatLng destination;\r\n  BitmapDescriptor sourceIcon = BitmapDescriptor.defaultMarker;\r\n  BitmapDescriptor destinationIcon = BitmapDescriptor.defaultMarker;\r\n  BitmapDescriptor currentLocationIcon = BitmapDescriptor.defaultMarker;\r\n  //LocationData? currentLocation;\r\n  LatLng? currentWorkerLocation;\r\n\r\n\r\n  @override\r\n  void initState() {\r\n    destination = widget.distination;\r\n    getCurrentLocation();\r\n    //setCustomMarkerIcon();\r\n    super.initState();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    getPolyPoints();\r\n    return Scaffold(\r\n      body: currentWorkerLocation == null\r\n          ? const Center(child: Text(\"Loading\"))\r\n          :\r\n          Stack(\r\n            children: [\r\n              googleMaps(),\r\n              Padding(\r\n                padding: EdgeInsets.all(AppPadding.p20),\r\n                child: CloseButton(onPressed: (){\r\n                  if(_timer!=null) _timer!.cancel();\r\n                  Navigator.of(context).pop();\r\n                }, color: AppColors.mainColor,\r\n                ),\r\n              ),   ],\r\n          )\r\n    );\r\n  }\r\n  Widget googleMaps(){\r\n    return GoogleMap(\r\n      initialCameraPosition: CameraPosition(\r\n        target: LatLng(currentWorkerLocation!.latitude??25.2867729,currentWorkerLocation!.longitude??55.3742941),\r\n        zoom: 13.5,\r\n      ),\r\n      markers: {\r\n        Marker(\r\n          markerId: const MarkerId(\"currentLocation\"),\r\n          icon: currentLocationIcon,\r\n          position: LatLng(\r\n              currentWorkerLocation!.latitude!, currentWorkerLocation!.longitude!),\r\n        ),\r\n        /*Marker(\r\n          markerId: const MarkerId(\"source\"),\r\n          icon: sourceIcon,\r\n          position: sourceLocation,\r\n        ),*/\r\n        Marker(\r\n          markerId: const MarkerId(\"destination\"),\r\n          icon: destinationIcon,\r\n          position: destination,\r\n        ),\r\n      },\r\n      polylines: {\r\n        Polyline(\r\n          polylineId: const PolylineId(\"route\"),\r\n          points: polylineCoordinates,\r\n          color: const Color(0xFF7B61FF),\r\n          width: 6,\r\n        ),\r\n      },\r\n      onMapCreated: (mapController) {\r\n        _controller.complete(mapController);\r\n      },\r\n    );\r\n  }\r\n\r\n  List<LatLng> polylineCoordinates = [];\r\n\r\n  void getPolyPoints() async {\r\n   try{\r\n     PolylinePoints polylinePoints = PolylinePoints();\r\n     PolylineResult result = await polylinePoints.getRouteBetweenCoordinates(\r\n       Strings.mapKey, // Your Google Map Key\r\n       PointLatLng(currentWorkerLocation!.latitude, currentWorkerLocation!.longitude),\r\n       PointLatLng(destination.latitude, destination.longitude),\r\n       travelMode: TravelMode.driving,\r\n     );\r\n     if (result.points.isNotEmpty) {\r\n       result.points.forEach(\r\n             (PointLatLng point) => polylineCoordinates.add(\r\n           LatLng(point.latitude, point.longitude),\r\n         ),\r\n       );\r\n       setState(() {});\r\n     }\r\n\r\n   }catch(e){\r\n\r\n   }\r\n  }\r\n\r\n  void setCustomMarkerIcon() {\r\n    BitmapDescriptor.fromAssetImage(\r\n        ImageConfiguration.empty, \"assets/Pin_source.png\")\r\n        .then(\r\n          (icon) {\r\n        sourceIcon = icon;\r\n      },\r\n    );\r\n    BitmapDescriptor.fromAssetImage(\r\n        ImageConfiguration.empty, \"assets/Pin_destination.png\")\r\n        .then(\r\n          (icon) {\r\n        destinationIcon = icon;\r\n      },\r\n    );\r\n    BitmapDescriptor.fromAssetImage(\r\n        ImageConfiguration.empty, \"assets/Badge.png\")\r\n        .then(\r\n          (icon) {\r\n        currentLocationIcon = icon;\r\n      },\r\n    );\r\n  }\r\n\r\n  Timer? _timer;\r\n  void getCurrentLocation() async {\r\n    //Location location = Location();\r\n   // GoogleMapController googleMapController = await _controller.future;\r\n   _timer = Timer.periodic(Duration(seconds: 3), (timer) async{\r\n      await APIService.checkLocation(widget.orderServiceId).then(\r\n            (location) {\r\n          //currentLocation = location;\r\n              if(location!=null) currentWorkerLocation = LatLng(location!.latitude, location!.longitude);\r\n        },\r\n      );\r\n      /*googleMapController.animateCamera(\r\n        CameraUpdate.newCameraPosition(\r\n          CameraPosition(\r\n            zoom: 13.5,\r\n            target: currentWorkerLocation!,\r\n          ),\r\n        ),\r\n      );*/\r\n      setState(() {});\r\n    });\r\n    /*location.onLocationChanged.listen(\r\n          (newLoc) {\r\n        //currentWorkerLocation = newLoc;\r\n            currentWorkerLocation = LatLng(newLoc.latitude!, newLoc.longitude!);\r\n        googleMapController.animateCamera(\r\n          CameraUpdate.newCameraPosition(\r\n            CameraPosition(\r\n              zoom: 13.5,\r\n              target: LatLng(\r\n                newLoc.latitude!,\r\n                newLoc.longitude!,\r\n              ),\r\n            ),\r\n          ),\r\n        );\r\n        setState(() {});\r\n      },\r\n    );*/\r\n  }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/map/orderTrackingPage.dart b/lib/map/orderTrackingPage.dart
--- a/lib/map/orderTrackingPage.dart	
+++ b/lib/map/orderTrackingPage.dart	
@@ -146,7 +146,7 @@
   void getCurrentLocation() async {
     //Location location = Location();
    // GoogleMapController googleMapController = await _controller.future;
-   _timer = Timer.periodic(Duration(seconds: 3), (timer) async{
+   _timer = Timer.periodic(Duration(seconds: 25), (timer) async{
       await APIService.checkLocation(widget.orderServiceId).then(
             (location) {
           //currentLocation = location;
